# üñ•Ô∏è Miktos Desktop App - Production Dockerfile
# Multi-stage build for optimized React + Tauri deployment

# Stage 1: Build the React frontend
FROM node:18-alpine as frontend-builder

# Set working directory
WORKDIR /app

# Install dependencies
COPY package*.json ./
RUN npm ci --only=production

# Copy source code and build
COPY . .
RUN npm run build

# Stage 2: Build Tauri application
FROM rust:1.75-alpine as tauri-builder

# Install system dependencies
RUN apk add --no-cache \
    build-base \
    curl \
    wget \
    file \
    openssl-dev \
    webkit2gtk-dev \
    gtk+3.0-dev \
    libayatana-appindicator3-dev \
    librsvg-dev

# Set working directory
WORKDIR /app

# Copy Rust workspace files
COPY src-tauri/Cargo.toml src-tauri/Cargo.lock ./src-tauri/
COPY src-tauri/src ./src-tauri/src/

# Copy built frontend from previous stage
COPY --from=frontend-builder /app/dist ./src/

# Build Tauri application
WORKDIR /app/src-tauri
RUN cargo build --release

# Stage 3: Production runtime (for web version)
FROM nginx:alpine as production

# Install curl for health checks
RUN apk add --no-cache curl

# Copy built frontend to nginx
COPY --from=frontend-builder /app/dist /usr/share/nginx/html

# Copy nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf

# Create non-root user
RUN addgroup -g 1001 -S nginx && \
    adduser -S -D -H -u 1001 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx

# Set permissions
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d

# Switch to non-root user
USER nginx

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:3000 || exit 1

# Expose port
EXPOSE 3000

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
